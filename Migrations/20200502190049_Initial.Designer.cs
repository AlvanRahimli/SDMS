// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SDMS.Data;

namespace SDMS.Migrations
{
    [DbContext(typeof(SDMSContext))]
    [Migration("20200502190049_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("SDMS.Models.Absence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Absences");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b51279a1-bf90-409f-83aa-028e01a7f9f2"),
                            CourseId = new Guid("d8c0c776-f67a-49bd-a63e-38a0da29ab60"),
                            DateTime = new DateTime(2021, 3, 2, 23, 0, 48, 546, DateTimeKind.Local).AddTicks(2215),
                            StudentId = new Guid("995c68d3-ce71-4b3e-b8a3-3e5fe52c9343")
                        },
                        new
                        {
                            Id = new Guid("beb9e04d-2609-4e26-a8af-7dc0222b628f"),
                            CourseId = new Guid("d8c0c776-f67a-49bd-a63e-38a0da29ab60"),
                            DateTime = new DateTime(2021, 3, 2, 23, 0, 48, 546, DateTimeKind.Local).AddTicks(3136),
                            StudentId = new Guid("995c68d3-ce71-4b3e-b8a3-3e5fe52c9343")
                        },
                        new
                        {
                            Id = new Guid("a70e7eeb-1b0b-4b1d-9621-8385f7d61153"),
                            CourseId = new Guid("7993eeda-454f-4abb-bd79-b014eeb50e9f"),
                            DateTime = new DateTime(2021, 3, 17, 23, 0, 48, 546, DateTimeKind.Local).AddTicks(3217),
                            StudentId = new Guid("f4978b1f-c59f-4ac1-9bf4-20a28e82ea1d")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("RegistrtationStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bde17eaa-262d-4269-9dec-670f32e8abce"),
                            Email = "admin1@sdms.az",
                            Password = new byte[] { 118, 154, 146, 167, 110, 72, 79, 210, 194, 40, 188, 53, 92, 240, 58, 113, 238, 249, 88, 81, 104, 52, 117, 142, 73, 119, 219, 182, 94, 84, 206, 42 },
                            RegistrtationStatus = 1
                        });
                });

            modelBuilder.Entity("SDMS.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AbsenceLimit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Credit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RequiredById")
                        .HasColumnType("TEXT");

                    b.Property<string>("SyllabusPath")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RequiredById");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8c0c776-f67a-49bd-a63e-38a0da29ab60"),
                            AbsenceLimit = 11,
                            Credit = 6,
                            Name = "Calculus I",
                            RequiredById = new Guid("7993eeda-454f-4abb-bd79-b014eeb50e9f"),
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("7993eeda-454f-4abb-bd79-b014eeb50e9f"),
                            AbsenceLimit = 11,
                            Credit = 6,
                            Name = "Calculus II",
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("d31ec319-cc9b-4ec1-8591-dc9204c74217"),
                            AbsenceLimit = 6,
                            Credit = 5,
                            Name = "Probability and Statistics",
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("daad583a-188b-45ee-8955-f958eb5629ea"),
                            AbsenceLimit = 11,
                            Credit = 5,
                            Name = "System Engineering Conseption",
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("3849542f-dc9c-4eb5-a27d-d9bd7ca4262d"),
                            AbsenceLimit = 6,
                            Credit = 6,
                            Name = "Introduction to Programming",
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("59d13275-f16e-4525-a71e-c75e7afe3bac"),
                            AbsenceLimit = 13,
                            Credit = 4,
                            Name = "Physics I",
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("c8bc39cf-aa63-4854-a54f-978bc1d864f6"),
                            AbsenceLimit = 13,
                            Credit = 4,
                            Name = "Physics II",
                            SyllabusPath = "N/A"
                        });
                });

            modelBuilder.Entity("SDMS.Models.CourseSpeciality", b =>
                {
                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("SpecialityId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSpecialities");

                    b.HasData(
                        new
                        {
                            SpecialityId = new Guid("64dddb31-a5a1-4b24-86d3-8b78164dfa2d"),
                            CourseId = new Guid("d8c0c776-f67a-49bd-a63e-38a0da29ab60")
                        },
                        new
                        {
                            SpecialityId = new Guid("64dddb31-a5a1-4b24-86d3-8b78164dfa2d"),
                            CourseId = new Guid("7993eeda-454f-4abb-bd79-b014eeb50e9f")
                        },
                        new
                        {
                            SpecialityId = new Guid("64dddb31-a5a1-4b24-86d3-8b78164dfa2d"),
                            CourseId = new Guid("d31ec319-cc9b-4ec1-8591-dc9204c74217")
                        },
                        new
                        {
                            SpecialityId = new Guid("46e455b2-40de-4fac-b56e-69ffe4846685"),
                            CourseId = new Guid("d31ec319-cc9b-4ec1-8591-dc9204c74217")
                        },
                        new
                        {
                            SpecialityId = new Guid("64dddb31-a5a1-4b24-86d3-8b78164dfa2d"),
                            CourseId = new Guid("3849542f-dc9c-4eb5-a27d-d9bd7ca4262d")
                        },
                        new
                        {
                            SpecialityId = new Guid("64dddb31-a5a1-4b24-86d3-8b78164dfa2d"),
                            CourseId = new Guid("59d13275-f16e-4525-a71e-c75e7afe3bac")
                        },
                        new
                        {
                            SpecialityId = new Guid("64dddb31-a5a1-4b24-86d3-8b78164dfa2d"),
                            CourseId = new Guid("c8bc39cf-aa63-4854-a54f-978bc1d864f6")
                        },
                        new
                        {
                            SpecialityId = new Guid("46e455b2-40de-4fac-b56e-69ffe4846685"),
                            CourseId = new Guid("59d13275-f16e-4525-a71e-c75e7afe3bac")
                        },
                        new
                        {
                            SpecialityId = new Guid("46e455b2-40de-4fac-b56e-69ffe4846685"),
                            CourseId = new Guid("c8bc39cf-aa63-4854-a54f-978bc1d864f6")
                        });
                });

            modelBuilder.Entity("SDMS.Models.CurrentCourseStudent", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseTeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("CourseTeacherId");

                    b.HasIndex("StudentId");

                    b.ToTable("CurrentCourseStudents");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("7993eeda-454f-4abb-bd79-b014eeb50e9f"),
                            StudentId = new Guid("995c68d3-ce71-4b3e-b8a3-3e5fe52c9343"),
                            CourseTeacherId = new Guid("a09df384-2dca-4dc3-850f-c064c46fabee")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Score", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScoreOver100")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Scores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47bef39b-c373-484e-809f-25286cf641c3"),
                            CourseId = new Guid("d8c0c776-f67a-49bd-a63e-38a0da29ab60"),
                            Date = new DateTime(2020, 2, 2, 23, 0, 48, 546, DateTimeKind.Local).AddTicks(6087),
                            ScoreOver100 = 93,
                            StudentId = new Guid("995c68d3-ce71-4b3e-b8a3-3e5fe52c9343")
                        },
                        new
                        {
                            Id = new Guid("079d49a5-3ecc-48e4-b220-b49ca2be358c"),
                            CourseId = new Guid("d8c0c776-f67a-49bd-a63e-38a0da29ab60"),
                            Date = new DateTime(2020, 3, 2, 23, 0, 48, 546, DateTimeKind.Local).AddTicks(7286),
                            ScoreOver100 = 85,
                            StudentId = new Guid("f4978b1f-c59f-4ac1-9bf4-20a28e82ea1d")
                        },
                        new
                        {
                            Id = new Guid("26567141-155a-45d9-a392-82b87a44a58a"),
                            CourseId = new Guid("7993eeda-454f-4abb-bd79-b014eeb50e9f"),
                            Date = new DateTime(2020, 2, 14, 23, 0, 48, 546, DateTimeKind.Local).AddTicks(7347),
                            ScoreOver100 = 100,
                            StudentId = new Guid("f4978b1f-c59f-4ac1-9bf4-20a28e82ea1d")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Specialities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64dddb31-a5a1-4b24-86d3-8b78164dfa2d"),
                            Name = "System Engineering",
                            StartDate = new DateTime(2020, 5, 2, 23, 0, 48, 526, DateTimeKind.Local).AddTicks(6310)
                        },
                        new
                        {
                            Id = new Guid("46e455b2-40de-4fac-b56e-69ffe4846685"),
                            Name = "Information Technologies",
                            StartDate = new DateTime(2020, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SDMS.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("RegisterStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("995c68d3-ce71-4b3e-b8a3-3e5fe52c9343"),
                            CardNumber = "ALVA001",
                            Details = "BA Programs",
                            Email = "alvan@sdms.az",
                            Gender = 0,
                            Name = "Alvan Rahimli",
                            Password = new byte[] { 220, 121, 31, 195, 66, 161, 196, 242, 197, 217, 20, 142, 19, 132, 185, 44, 89, 244, 177, 222, 235, 28, 62, 173, 121, 184, 91, 151, 77, 250, 162, 156 },
                            RegisterStatus = 1,
                            Role = "student",
                            SpecialityId = new Guid("64dddb31-a5a1-4b24-86d3-8b78164dfa2d")
                        },
                        new
                        {
                            Id = new Guid("f4978b1f-c59f-4ac1-9bf4-20a28e82ea1d"),
                            CardNumber = "SAMI001",
                            Details = "BA Programs",
                            Email = "samir@sdms.az",
                            Gender = 0,
                            Name = "Samir Hasanov",
                            Password = new byte[] { 26, 138, 154, 79, 225, 90, 179, 124, 122, 92, 74, 150, 215, 163, 128, 13, 221, 243, 126, 213, 98, 60, 251, 224, 44, 198, 158, 237, 77, 194, 220, 152 },
                            RegisterStatus = 1,
                            Role = "student",
                            SpecialityId = new Guid("64dddb31-a5a1-4b24-86d3-8b78164dfa2d")
                        });
                });

            modelBuilder.Entity("SDMS.Models.TakenCourseStudent", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseTeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("CourseTeacherId");

                    b.HasIndex("StudentId");

                    b.ToTable("TakenCourseStudents");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("d8c0c776-f67a-49bd-a63e-38a0da29ab60"),
                            StudentId = new Guid("995c68d3-ce71-4b3e-b8a3-3e5fe52c9343"),
                            CourseTeacherId = new Guid("a09df384-2dca-4dc3-850f-c064c46fabee")
                        },
                        new
                        {
                            CourseId = new Guid("d31ec319-cc9b-4ec1-8591-dc9204c74217"),
                            StudentId = new Guid("995c68d3-ce71-4b3e-b8a3-3e5fe52c9343"),
                            CourseTeacherId = new Guid("c988523e-be5f-4e81-929c-1341c54bbe32")
                        },
                        new
                        {
                            CourseId = new Guid("d8c0c776-f67a-49bd-a63e-38a0da29ab60"),
                            StudentId = new Guid("f4978b1f-c59f-4ac1-9bf4-20a28e82ea1d"),
                            CourseTeacherId = new Guid("a09df384-2dca-4dc3-850f-c064c46fabee")
                        },
                        new
                        {
                            CourseId = new Guid("7993eeda-454f-4abb-bd79-b014eeb50e9f"),
                            StudentId = new Guid("f4978b1f-c59f-4ac1-9bf4-20a28e82ea1d"),
                            CourseTeacherId = new Guid("a09df384-2dca-4dc3-850f-c064c46fabee")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CVPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("RegisterStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a09df384-2dca-4dc3-850f-c064c46fabee"),
                            CVPath = "N/A",
                            CardNumber = "ANAR001",
                            Details = "since 2017 teaching here. Test data LOL",
                            Email = "anar@sdms.az",
                            Gender = 0,
                            Name = "Anar Kazimov",
                            Password = new byte[] { 13, 163, 157, 63, 215, 56, 253, 36, 173, 144, 123, 128, 215, 160, 65, 146, 66, 160, 85, 207, 141, 30, 123, 20, 133, 166, 142, 100, 95, 123, 123, 212 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        },
                        new
                        {
                            Id = new Guid("c988523e-be5f-4e81-929c-1341c54bbe32"),
                            CVPath = "N/A",
                            CardNumber = "KONU001",
                            Details = "Cuuute teacher. doesn't know eng.",
                            Email = "konul@sdms.az",
                            Gender = 1,
                            Name = "Konul Jabbarova",
                            Password = new byte[] { 225, 95, 75, 32, 223, 30, 43, 41, 130, 26, 86, 69, 237, 49, 122, 22, 200, 149, 87, 68, 150, 95, 141, 191, 60, 121, 48, 214, 99, 239, 101, 71 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        },
                        new
                        {
                            Id = new Guid("946d7c30-d8fc-4a5d-970f-8eb84ad66233"),
                            CVPath = "N/A",
                            CardNumber = "ULVI001",
                            Details = "Meeh, not bad",
                            Email = "ulviyye@sdms.az",
                            Gender = 1,
                            Name = "Ulviyye Memmedova",
                            Password = new byte[] { 168, 14, 103, 199, 215, 42, 209, 248, 3, 160, 5, 252, 245, 60, 173, 182, 25, 218, 195, 84, 47, 209, 215, 43, 123, 101, 136, 37, 83, 85, 162, 6 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        },
                        new
                        {
                            Id = new Guid("b9739149-38c1-4dfa-914a-c18688784e0c"),
                            CVPath = "N/A",
                            CardNumber = "CEYH001",
                            Details = "Veery Cuuute teacher. doesn't know eng.",
                            Email = "ceyhun@sdms.az",
                            Gender = 0,
                            Name = "Ceyhun Naziyev",
                            Password = new byte[] { 195, 139, 238, 24, 37, 33, 11, 141, 87, 96, 116, 187, 225, 223, 196, 114, 171, 140, 193, 4, 160, 103, 124, 221, 126, 213, 181, 35, 99, 184, 54, 125 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        },
                        new
                        {
                            Id = new Guid("65be49c1-0b5c-4cce-a4fb-ce5d2a8206ba"),
                            CVPath = "N/A",
                            CardNumber = "ELED001",
                            Details = "Reis.",
                            Email = "eleddin@sdms.az",
                            Gender = 0,
                            Name = "Eleddin Memmedli",
                            Password = new byte[] { 47, 241, 100, 169, 13, 197, 122, 59, 242, 8, 3, 103, 181, 141, 173, 216, 176, 2, 209, 17, 102, 231, 236, 184, 248, 180, 21, 168, 107, 69, 177, 248 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        });
                });

            modelBuilder.Entity("SDMS.Models.TeacherCourse", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherCourses");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("d8c0c776-f67a-49bd-a63e-38a0da29ab60"),
                            TeacherId = new Guid("a09df384-2dca-4dc3-850f-c064c46fabee")
                        },
                        new
                        {
                            CourseId = new Guid("7993eeda-454f-4abb-bd79-b014eeb50e9f"),
                            TeacherId = new Guid("a09df384-2dca-4dc3-850f-c064c46fabee")
                        },
                        new
                        {
                            CourseId = new Guid("d31ec319-cc9b-4ec1-8591-dc9204c74217"),
                            TeacherId = new Guid("c988523e-be5f-4e81-929c-1341c54bbe32")
                        },
                        new
                        {
                            CourseId = new Guid("3849542f-dc9c-4eb5-a27d-d9bd7ca4262d"),
                            TeacherId = new Guid("946d7c30-d8fc-4a5d-970f-8eb84ad66233")
                        },
                        new
                        {
                            CourseId = new Guid("59d13275-f16e-4525-a71e-c75e7afe3bac"),
                            TeacherId = new Guid("b9739149-38c1-4dfa-914a-c18688784e0c")
                        },
                        new
                        {
                            CourseId = new Guid("c8bc39cf-aa63-4854-a54f-978bc1d864f6"),
                            TeacherId = new Guid("b9739149-38c1-4dfa-914a-c18688784e0c")
                        },
                        new
                        {
                            CourseId = new Guid("d8c0c776-f67a-49bd-a63e-38a0da29ab60"),
                            TeacherId = new Guid("65be49c1-0b5c-4cce-a4fb-ce5d2a8206ba")
                        },
                        new
                        {
                            CourseId = new Guid("7993eeda-454f-4abb-bd79-b014eeb50e9f"),
                            TeacherId = new Guid("65be49c1-0b5c-4cce-a4fb-ce5d2a8206ba")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Absence", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SDMS.Models.Course", b =>
                {
                    b.HasOne("SDMS.Models.Course", "RequiredBy")
                        .WithMany("Prerequisites")
                        .HasForeignKey("RequiredById");

                    b.HasOne("SDMS.Models.Teacher", null)
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("SDMS.Models.CourseSpeciality", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany("CourseSpecialities")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Speciality", "Speciality")
                        .WithMany("CourseSpecialities")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SDMS.Models.CurrentCourseStudent", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany("CurrentCourseStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SDMS.Models.Teacher", "CourseTeacher")
                        .WithMany()
                        .HasForeignKey("CourseTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Student", "Student")
                        .WithMany("CurrentCourseStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SDMS.Models.Score", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Student", "Student")
                        .WithMany("Marks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SDMS.Models.Student", b =>
                {
                    b.HasOne("SDMS.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SDMS.Models.TakenCourseStudent", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany("TakenCourseStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SDMS.Models.Teacher", "CourseTeacher")
                        .WithMany()
                        .HasForeignKey("CourseTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Student", "Student")
                        .WithMany("TakenCourseStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SDMS.Models.TeacherCourse", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Teacher", "Teacher")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
