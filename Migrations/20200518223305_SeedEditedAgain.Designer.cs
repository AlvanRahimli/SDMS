// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SDMS.Data;

namespace SDMS.Migrations
{
    [DbContext(typeof(SDMSContext))]
    [Migration("20200518223305_SeedEditedAgain")]
    partial class SeedEditedAgain
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("SDMS.Models.Absence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Absences");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5ed90f9-5d73-44d1-996f-86754d8842dd"),
                            CourseId = new Guid("abf6b210-566c-4dcd-bc5e-7527599248cb"),
                            DateTime = new DateTime(2021, 3, 19, 2, 33, 3, 764, DateTimeKind.Local).AddTicks(664),
                            StudentId = new Guid("59f363ad-4326-4831-9fff-c34e457696c3")
                        },
                        new
                        {
                            Id = new Guid("19e39407-40f7-44f8-93b1-c6219ac63085"),
                            CourseId = new Guid("abf6b210-566c-4dcd-bc5e-7527599248cb"),
                            DateTime = new DateTime(2021, 3, 19, 2, 33, 3, 764, DateTimeKind.Local).AddTicks(1720),
                            StudentId = new Guid("59f363ad-4326-4831-9fff-c34e457696c3")
                        },
                        new
                        {
                            Id = new Guid("2752bd2c-05ce-4dfb-bba4-83e04426a3d3"),
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            DateTime = new DateTime(2021, 4, 3, 2, 33, 3, 764, DateTimeKind.Local).AddTicks(1788),
                            StudentId = new Guid("e92c249a-ad0a-4372-85c7-3aa86a809aaa")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("RegistrtationStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4a45e27-d986-438f-a3bc-a97c3ec5428c"),
                            Email = "admin1@sdms.az",
                            Password = new byte[] { 118, 154, 146, 167, 110, 72, 79, 210, 194, 40, 188, 53, 92, 240, 58, 113, 238, 249, 88, 81, 104, 52, 117, 142, 73, 119, 219, 182, 94, 84, 206, 42 },
                            RegistrtationStatus = 1
                        });
                });

            modelBuilder.Entity("SDMS.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AbsenceLimit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Credit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RequiredById")
                        .HasColumnType("TEXT");

                    b.Property<string>("SyllabusPath")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RequiredById");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abf6b210-566c-4dcd-bc5e-7527599248cb"),
                            AbsenceLimit = 11,
                            Credit = 6,
                            Name = "Calculus I",
                            RequiredById = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            AbsenceLimit = 11,
                            Credit = 6,
                            Name = "Calculus II",
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("77495424-0d7f-43f7-8d6c-b430b2927c1a"),
                            AbsenceLimit = 6,
                            Credit = 5,
                            Name = "Probability and Statistics",
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("f9f27bec-bde9-41e0-9853-5bc56fa1299b"),
                            AbsenceLimit = 11,
                            Credit = 5,
                            Name = "System Engineering Conseption",
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("86a221df-dd80-4def-8462-da7b4e708977"),
                            AbsenceLimit = 6,
                            Credit = 6,
                            Name = "Introduction to Programming",
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("824bb85d-f710-4edf-ba9f-3faef9dc70ba"),
                            AbsenceLimit = 13,
                            Credit = 4,
                            Name = "Physics I",
                            RequiredById = new Guid("a158ea83-c2ed-4940-ae66-88e5008bd3bb"),
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("a158ea83-c2ed-4940-ae66-88e5008bd3bb"),
                            AbsenceLimit = 13,
                            Credit = 4,
                            Name = "Physics II",
                            SyllabusPath = "N/A"
                        });
                });

            modelBuilder.Entity("SDMS.Models.CourseSpeciality", b =>
                {
                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("SpecialityId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSpecialities");

                    b.HasData(
                        new
                        {
                            SpecialityId = new Guid("f7082f52-082d-42b4-8538-c98f4bf2ab18"),
                            CourseId = new Guid("abf6b210-566c-4dcd-bc5e-7527599248cb")
                        },
                        new
                        {
                            SpecialityId = new Guid("f7082f52-082d-42b4-8538-c98f4bf2ab18"),
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1")
                        },
                        new
                        {
                            SpecialityId = new Guid("f7082f52-082d-42b4-8538-c98f4bf2ab18"),
                            CourseId = new Guid("77495424-0d7f-43f7-8d6c-b430b2927c1a")
                        },
                        new
                        {
                            SpecialityId = new Guid("5de8b989-da16-4892-bdc6-1aa733acc6d9"),
                            CourseId = new Guid("77495424-0d7f-43f7-8d6c-b430b2927c1a")
                        },
                        new
                        {
                            SpecialityId = new Guid("f7082f52-082d-42b4-8538-c98f4bf2ab18"),
                            CourseId = new Guid("86a221df-dd80-4def-8462-da7b4e708977")
                        },
                        new
                        {
                            SpecialityId = new Guid("f7082f52-082d-42b4-8538-c98f4bf2ab18"),
                            CourseId = new Guid("824bb85d-f710-4edf-ba9f-3faef9dc70ba")
                        },
                        new
                        {
                            SpecialityId = new Guid("f7082f52-082d-42b4-8538-c98f4bf2ab18"),
                            CourseId = new Guid("a158ea83-c2ed-4940-ae66-88e5008bd3bb")
                        },
                        new
                        {
                            SpecialityId = new Guid("5de8b989-da16-4892-bdc6-1aa733acc6d9"),
                            CourseId = new Guid("824bb85d-f710-4edf-ba9f-3faef9dc70ba")
                        },
                        new
                        {
                            SpecialityId = new Guid("5de8b989-da16-4892-bdc6-1aa733acc6d9"),
                            CourseId = new Guid("a158ea83-c2ed-4940-ae66-88e5008bd3bb")
                        });
                });

            modelBuilder.Entity("SDMS.Models.CurrentCourseStudent", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseTeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("CourseTeacherId");

                    b.HasIndex("StudentId");

                    b.ToTable("CurrentCourseStudents");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            StudentId = new Guid("59f363ad-4326-4831-9fff-c34e457696c3"),
                            CourseTeacherId = new Guid("3c4ab952-8b79-4e58-8aaf-31a52a4435a9")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Score", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScoreOver100")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Scores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9f98d66-9c31-4340-8ba5-04403bc51efb"),
                            CourseId = new Guid("abf6b210-566c-4dcd-bc5e-7527599248cb"),
                            Date = new DateTime(2019, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScoreOver100 = 93,
                            StudentId = new Guid("59f363ad-4326-4831-9fff-c34e457696c3")
                        },
                        new
                        {
                            Id = new Guid("8185413b-ce8b-427e-85b9-22a37c531950"),
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            Date = new DateTime(2020, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScoreOver100 = 93,
                            StudentId = new Guid("59f363ad-4326-4831-9fff-c34e457696c3")
                        },
                        new
                        {
                            Id = new Guid("2ab52c55-0069-47c4-b447-08c40fb2e657"),
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            Date = new DateTime(2019, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScoreOver100 = 93,
                            StudentId = new Guid("59f363ad-4326-4831-9fff-c34e457696c3")
                        },
                        new
                        {
                            Id = new Guid("0e9a2f13-f47e-4421-b7da-471e18808587"),
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            Date = new DateTime(2019, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScoreOver100 = 93,
                            StudentId = new Guid("59f363ad-4326-4831-9fff-c34e457696c3")
                        },
                        new
                        {
                            Id = new Guid("6a9fefcb-db39-4022-a0b9-202428be0840"),
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            Date = new DateTime(2020, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScoreOver100 = 93,
                            StudentId = new Guid("59f363ad-4326-4831-9fff-c34e457696c3")
                        },
                        new
                        {
                            Id = new Guid("a1376352-e505-45e2-8eba-f91cc7d7cfe4"),
                            CourseId = new Guid("abf6b210-566c-4dcd-bc5e-7527599248cb"),
                            Date = new DateTime(2019, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScoreOver100 = 85,
                            StudentId = new Guid("e92c249a-ad0a-4372-85c7-3aa86a809aaa")
                        },
                        new
                        {
                            Id = new Guid("5504e630-4bdf-4c9f-a596-1b9a3f84e26c"),
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            Date = new DateTime(2019, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScoreOver100 = 100,
                            StudentId = new Guid("e92c249a-ad0a-4372-85c7-3aa86a809aaa")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Specialities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7082f52-082d-42b4-8538-c98f4bf2ab18"),
                            Name = "System Engineering",
                            StartDate = new DateTime(2020, 5, 19, 2, 33, 3, 741, DateTimeKind.Local).AddTicks(6796)
                        },
                        new
                        {
                            Id = new Guid("5de8b989-da16-4892-bdc6-1aa733acc6d9"),
                            Name = "Information Technologies",
                            StartDate = new DateTime(2020, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SDMS.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("RegisterStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59f363ad-4326-4831-9fff-c34e457696c3"),
                            CardNumber = "ALVA001",
                            Details = "BA Programs",
                            Email = "alvan@sdms.az",
                            Gender = 0,
                            Name = "Alvan Rahimli",
                            Password = new byte[] { 220, 121, 31, 195, 66, 161, 196, 242, 197, 217, 20, 142, 19, 132, 185, 44, 89, 244, 177, 222, 235, 28, 62, 173, 121, 184, 91, 151, 77, 250, 162, 156 },
                            RegisterStatus = 1,
                            Role = "student",
                            SpecialityId = new Guid("f7082f52-082d-42b4-8538-c98f4bf2ab18")
                        },
                        new
                        {
                            Id = new Guid("e92c249a-ad0a-4372-85c7-3aa86a809aaa"),
                            CardNumber = "SAMI001",
                            Details = "BA Programs",
                            Email = "samir@sdms.az",
                            Gender = 0,
                            Name = "Samir Hasanov",
                            Password = new byte[] { 26, 138, 154, 79, 225, 90, 179, 124, 122, 92, 74, 150, 215, 163, 128, 13, 221, 243, 126, 213, 98, 60, 251, 224, 44, 198, 158, 237, 77, 194, 220, 152 },
                            RegisterStatus = 1,
                            Role = "student",
                            SpecialityId = new Guid("f7082f52-082d-42b4-8538-c98f4bf2ab18")
                        },
                        new
                        {
                            Id = new Guid("f5eddb87-d233-4951-b277-bc4adfed9a30"),
                            CardNumber = "SABI001",
                            Details = "BA Programs",
                            Email = "sabina@sdms.az",
                            Gender = 1,
                            Name = "Sabina Shukurova",
                            Password = new byte[] { 64, 60, 242, 176, 168, 165, 59, 225, 28, 96, 220, 59, 88, 20, 200, 254, 242, 254, 224, 122, 96, 205, 214, 111, 223, 197, 134, 72, 42, 65, 50, 29 },
                            RegisterStatus = 1,
                            Role = "student",
                            SpecialityId = new Guid("f7082f52-082d-42b4-8538-c98f4bf2ab18")
                        },
                        new
                        {
                            Id = new Guid("675b7393-201d-477a-bc1a-2ade98986729"),
                            CardNumber = "RUFA001",
                            Details = "BA Programs",
                            Email = "rufat@sdms.az",
                            Gender = 0,
                            Name = "Rufat Karimli",
                            Password = new byte[] { 161, 252, 240, 162, 131, 171, 70, 11, 112, 249, 144, 65, 134, 118, 238, 149, 171, 235, 227, 94, 84, 115, 204, 124, 28, 96, 12, 54, 65, 133, 107, 5 },
                            RegisterStatus = 1,
                            Role = "student",
                            SpecialityId = new Guid("f7082f52-082d-42b4-8538-c98f4bf2ab18")
                        },
                        new
                        {
                            Id = new Guid("54e3aacc-d9c2-43bf-839d-6eebdab47519"),
                            CardNumber = "SAHI001",
                            Details = "BA Programs",
                            Email = "sahin@sdms.az",
                            Gender = 0,
                            Name = "Sahin Mahmudov",
                            Password = new byte[] { 199, 137, 16, 213, 61, 243, 79, 113, 37, 18, 22, 88, 243, 139, 235, 21, 230, 159, 5, 19, 153, 241, 226, 4, 56, 233, 252, 118, 40, 40, 110, 131 },
                            RegisterStatus = 1,
                            Role = "student",
                            SpecialityId = new Guid("f7082f52-082d-42b4-8538-c98f4bf2ab18")
                        },
                        new
                        {
                            Id = new Guid("c858dcc4-0330-4820-a18b-49f0b17f2bf7"),
                            CardNumber = "NIGA001",
                            Details = "BA Programs",
                            Email = "nigar@sdms.az",
                            Gender = 1,
                            Name = "Nigar Alakbarli",
                            Password = new byte[] { 130, 234, 54, 43, 116, 212, 243, 80, 87, 177, 62, 1, 50, 127, 163, 81, 248, 135, 4, 69, 154, 227, 87, 111, 102, 130, 62, 237, 236, 136, 202, 180 },
                            RegisterStatus = 1,
                            Role = "student",
                            SpecialityId = new Guid("f7082f52-082d-42b4-8538-c98f4bf2ab18")
                        });
                });

            modelBuilder.Entity("SDMS.Models.TakenCourseStudent", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseTeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("CourseTeacherId");

                    b.HasIndex("StudentId");

                    b.ToTable("TakenCourseStudents");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("abf6b210-566c-4dcd-bc5e-7527599248cb"),
                            StudentId = new Guid("59f363ad-4326-4831-9fff-c34e457696c3"),
                            CourseTeacherId = new Guid("3c4ab952-8b79-4e58-8aaf-31a52a4435a9")
                        },
                        new
                        {
                            CourseId = new Guid("77495424-0d7f-43f7-8d6c-b430b2927c1a"),
                            StudentId = new Guid("59f363ad-4326-4831-9fff-c34e457696c3"),
                            CourseTeacherId = new Guid("82d6c411-a56e-4ad4-993b-505562c5c222")
                        },
                        new
                        {
                            CourseId = new Guid("abf6b210-566c-4dcd-bc5e-7527599248cb"),
                            StudentId = new Guid("e92c249a-ad0a-4372-85c7-3aa86a809aaa"),
                            CourseTeacherId = new Guid("3c4ab952-8b79-4e58-8aaf-31a52a4435a9")
                        },
                        new
                        {
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            StudentId = new Guid("f5eddb87-d233-4951-b277-bc4adfed9a30"),
                            CourseTeacherId = new Guid("3c4ab952-8b79-4e58-8aaf-31a52a4435a9")
                        },
                        new
                        {
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            StudentId = new Guid("54e3aacc-d9c2-43bf-839d-6eebdab47519"),
                            CourseTeacherId = new Guid("3c4ab952-8b79-4e58-8aaf-31a52a4435a9")
                        },
                        new
                        {
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            StudentId = new Guid("675b7393-201d-477a-bc1a-2ade98986729"),
                            CourseTeacherId = new Guid("3c4ab952-8b79-4e58-8aaf-31a52a4435a9")
                        },
                        new
                        {
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            StudentId = new Guid("c858dcc4-0330-4820-a18b-49f0b17f2bf7"),
                            CourseTeacherId = new Guid("3c4ab952-8b79-4e58-8aaf-31a52a4435a9")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CVPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("RegisterStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c4ab952-8b79-4e58-8aaf-31a52a4435a9"),
                            CVPath = "N/A",
                            CardNumber = "ANAR001",
                            Details = "since 2017 teaching here. Test data LOL",
                            Email = "anar@sdms.az",
                            Gender = 0,
                            Name = "Anar Kazimov",
                            Password = new byte[] { 13, 163, 157, 63, 215, 56, 253, 36, 173, 144, 123, 128, 215, 160, 65, 146, 66, 160, 85, 207, 141, 30, 123, 20, 133, 166, 142, 100, 95, 123, 123, 212 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        },
                        new
                        {
                            Id = new Guid("82d6c411-a56e-4ad4-993b-505562c5c222"),
                            CVPath = "N/A",
                            CardNumber = "KONU001",
                            Details = "Cuuute teacher. doesn't know eng.",
                            Email = "konul@sdms.az",
                            Gender = 1,
                            Name = "Konul Jabbarova",
                            Password = new byte[] { 225, 95, 75, 32, 223, 30, 43, 41, 130, 26, 86, 69, 237, 49, 122, 22, 200, 149, 87, 68, 150, 95, 141, 191, 60, 121, 48, 214, 99, 239, 101, 71 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        },
                        new
                        {
                            Id = new Guid("cfe81a9b-c667-410c-aae7-188a406c7fe4"),
                            CVPath = "N/A",
                            CardNumber = "ULVI001",
                            Details = "Meeh, not bad",
                            Email = "ulviyye@sdms.az",
                            Gender = 1,
                            Name = "Ulviyye Memmedova",
                            Password = new byte[] { 168, 14, 103, 199, 215, 42, 209, 248, 3, 160, 5, 252, 245, 60, 173, 182, 25, 218, 195, 84, 47, 209, 215, 43, 123, 101, 136, 37, 83, 85, 162, 6 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        },
                        new
                        {
                            Id = new Guid("e35ac515-3d51-4b70-93ad-5ac347fa4a5a"),
                            CVPath = "N/A",
                            CardNumber = "CEYH001",
                            Details = "Veery Cuuute teacher. doesn't know eng.",
                            Email = "ceyhun@sdms.az",
                            Gender = 0,
                            Name = "Ceyhun Naziyev",
                            Password = new byte[] { 195, 139, 238, 24, 37, 33, 11, 141, 87, 96, 116, 187, 225, 223, 196, 114, 171, 140, 193, 4, 160, 103, 124, 221, 126, 213, 181, 35, 99, 184, 54, 125 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        },
                        new
                        {
                            Id = new Guid("c13c078e-fd3c-493b-93f3-443beca276e2"),
                            CVPath = "N/A",
                            CardNumber = "ELED001",
                            Details = "Reis.",
                            Email = "eleddin@sdms.az",
                            Gender = 0,
                            Name = "Eleddin Memmedli",
                            Password = new byte[] { 47, 241, 100, 169, 13, 197, 122, 59, 242, 8, 3, 103, 181, 141, 173, 216, 176, 2, 209, 17, 102, 231, 236, 184, 248, 180, 21, 168, 107, 69, 177, 248 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        });
                });

            modelBuilder.Entity("SDMS.Models.TeacherCourse", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherCourses");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("abf6b210-566c-4dcd-bc5e-7527599248cb"),
                            TeacherId = new Guid("3c4ab952-8b79-4e58-8aaf-31a52a4435a9")
                        },
                        new
                        {
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            TeacherId = new Guid("3c4ab952-8b79-4e58-8aaf-31a52a4435a9")
                        },
                        new
                        {
                            CourseId = new Guid("77495424-0d7f-43f7-8d6c-b430b2927c1a"),
                            TeacherId = new Guid("82d6c411-a56e-4ad4-993b-505562c5c222")
                        },
                        new
                        {
                            CourseId = new Guid("86a221df-dd80-4def-8462-da7b4e708977"),
                            TeacherId = new Guid("cfe81a9b-c667-410c-aae7-188a406c7fe4")
                        },
                        new
                        {
                            CourseId = new Guid("824bb85d-f710-4edf-ba9f-3faef9dc70ba"),
                            TeacherId = new Guid("e35ac515-3d51-4b70-93ad-5ac347fa4a5a")
                        },
                        new
                        {
                            CourseId = new Guid("a158ea83-c2ed-4940-ae66-88e5008bd3bb"),
                            TeacherId = new Guid("e35ac515-3d51-4b70-93ad-5ac347fa4a5a")
                        },
                        new
                        {
                            CourseId = new Guid("abf6b210-566c-4dcd-bc5e-7527599248cb"),
                            TeacherId = new Guid("c13c078e-fd3c-493b-93f3-443beca276e2")
                        },
                        new
                        {
                            CourseId = new Guid("9d8fcf3f-118c-4c2a-89d1-cd4176c19ad1"),
                            TeacherId = new Guid("c13c078e-fd3c-493b-93f3-443beca276e2")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Absence", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SDMS.Models.Course", b =>
                {
                    b.HasOne("SDMS.Models.Course", "RequiredBy")
                        .WithMany("Prerequisites")
                        .HasForeignKey("RequiredById");

                    b.HasOne("SDMS.Models.Teacher", null)
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("SDMS.Models.CourseSpeciality", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany("CourseSpecialities")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Speciality", "Speciality")
                        .WithMany("CourseSpecialities")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SDMS.Models.CurrentCourseStudent", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany("CurrentCourseStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SDMS.Models.Teacher", "CourseTeacher")
                        .WithMany()
                        .HasForeignKey("CourseTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Student", "Student")
                        .WithMany("CurrentCourseStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SDMS.Models.Score", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Student", "Student")
                        .WithMany("Marks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SDMS.Models.Student", b =>
                {
                    b.HasOne("SDMS.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SDMS.Models.TakenCourseStudent", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany("TakenCourseStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SDMS.Models.Teacher", "CourseTeacher")
                        .WithMany()
                        .HasForeignKey("CourseTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Student", "Student")
                        .WithMany("TakenCourseStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SDMS.Models.TeacherCourse", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Teacher", "Teacher")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
