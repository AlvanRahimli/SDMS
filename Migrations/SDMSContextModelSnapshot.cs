// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SDMS.Data;

namespace SDMS.Migrations
{
    [DbContext(typeof(SDMSContext))]
    partial class SDMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("SDMS.Models.Absence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Absences");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ba1de6a-04cc-4732-b33f-1b42eff53ca2"),
                            CourseId = new Guid("25e7075d-e83b-4b90-977d-93ead5e1d20b"),
                            DateTime = new DateTime(2021, 3, 2, 23, 5, 9, 156, DateTimeKind.Local).AddTicks(517),
                            StudentId = new Guid("22b7e4a5-91cf-4b43-9d43-b986e6eceafc")
                        },
                        new
                        {
                            Id = new Guid("508b399f-9c55-4d8f-9bf4-dcab6ad4fda9"),
                            CourseId = new Guid("25e7075d-e83b-4b90-977d-93ead5e1d20b"),
                            DateTime = new DateTime(2021, 3, 2, 23, 5, 9, 156, DateTimeKind.Local).AddTicks(1471),
                            StudentId = new Guid("22b7e4a5-91cf-4b43-9d43-b986e6eceafc")
                        },
                        new
                        {
                            Id = new Guid("1367a3d7-9b94-4ba7-8c6f-17439c008816"),
                            CourseId = new Guid("28729ea4-1932-45cd-aa3b-cc0ae3a5dc19"),
                            DateTime = new DateTime(2021, 3, 17, 23, 5, 9, 156, DateTimeKind.Local).AddTicks(1536),
                            StudentId = new Guid("fea749dd-5009-4676-8759-90949a81badc")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("RegistrtationStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a4d0620-6e7a-4b28-b0b6-80d6ccfcda31"),
                            Email = "admin1@sdms.az",
                            Password = new byte[] { 118, 154, 146, 167, 110, 72, 79, 210, 194, 40, 188, 53, 92, 240, 58, 113, 238, 249, 88, 81, 104, 52, 117, 142, 73, 119, 219, 182, 94, 84, 206, 42 },
                            RegistrtationStatus = 1
                        });
                });

            modelBuilder.Entity("SDMS.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AbsenceLimit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Credit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RequiredById")
                        .HasColumnType("TEXT");

                    b.Property<string>("SyllabusPath")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RequiredById");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25e7075d-e83b-4b90-977d-93ead5e1d20b"),
                            AbsenceLimit = 11,
                            Credit = 6,
                            Name = "Calculus I",
                            RequiredById = new Guid("28729ea4-1932-45cd-aa3b-cc0ae3a5dc19"),
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("28729ea4-1932-45cd-aa3b-cc0ae3a5dc19"),
                            AbsenceLimit = 11,
                            Credit = 6,
                            Name = "Calculus II",
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("b860427d-493e-4472-ac3e-9abf9fab9e15"),
                            AbsenceLimit = 6,
                            Credit = 5,
                            Name = "Probability and Statistics",
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("4d7fbd4d-fb6c-4ef8-9476-000f0fd32ef2"),
                            AbsenceLimit = 11,
                            Credit = 5,
                            Name = "System Engineering Conseption",
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("b30764dd-6ea0-4997-9d7f-4baeb8d03040"),
                            AbsenceLimit = 6,
                            Credit = 6,
                            Name = "Introduction to Programming",
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("52d3f9cf-2b66-415b-a4a6-cf6a676d1d47"),
                            AbsenceLimit = 13,
                            Credit = 4,
                            Name = "Physics I",
                            RequiredById = new Guid("e3d25582-8773-43b5-9d82-d7629755c426"),
                            SyllabusPath = "N/A"
                        },
                        new
                        {
                            Id = new Guid("e3d25582-8773-43b5-9d82-d7629755c426"),
                            AbsenceLimit = 13,
                            Credit = 4,
                            Name = "Physics II",
                            SyllabusPath = "N/A"
                        });
                });

            modelBuilder.Entity("SDMS.Models.CourseSpeciality", b =>
                {
                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.HasKey("SpecialityId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSpecialities");

                    b.HasData(
                        new
                        {
                            SpecialityId = new Guid("2c09f481-83b1-4c48-b6f8-08fb248e3ef8"),
                            CourseId = new Guid("25e7075d-e83b-4b90-977d-93ead5e1d20b")
                        },
                        new
                        {
                            SpecialityId = new Guid("2c09f481-83b1-4c48-b6f8-08fb248e3ef8"),
                            CourseId = new Guid("28729ea4-1932-45cd-aa3b-cc0ae3a5dc19")
                        },
                        new
                        {
                            SpecialityId = new Guid("2c09f481-83b1-4c48-b6f8-08fb248e3ef8"),
                            CourseId = new Guid("b860427d-493e-4472-ac3e-9abf9fab9e15")
                        },
                        new
                        {
                            SpecialityId = new Guid("aaab1fb6-a7b0-403f-af6b-67bdd95c4e4f"),
                            CourseId = new Guid("b860427d-493e-4472-ac3e-9abf9fab9e15")
                        },
                        new
                        {
                            SpecialityId = new Guid("2c09f481-83b1-4c48-b6f8-08fb248e3ef8"),
                            CourseId = new Guid("b30764dd-6ea0-4997-9d7f-4baeb8d03040")
                        },
                        new
                        {
                            SpecialityId = new Guid("2c09f481-83b1-4c48-b6f8-08fb248e3ef8"),
                            CourseId = new Guid("52d3f9cf-2b66-415b-a4a6-cf6a676d1d47")
                        },
                        new
                        {
                            SpecialityId = new Guid("2c09f481-83b1-4c48-b6f8-08fb248e3ef8"),
                            CourseId = new Guid("e3d25582-8773-43b5-9d82-d7629755c426")
                        },
                        new
                        {
                            SpecialityId = new Guid("aaab1fb6-a7b0-403f-af6b-67bdd95c4e4f"),
                            CourseId = new Guid("52d3f9cf-2b66-415b-a4a6-cf6a676d1d47")
                        },
                        new
                        {
                            SpecialityId = new Guid("aaab1fb6-a7b0-403f-af6b-67bdd95c4e4f"),
                            CourseId = new Guid("e3d25582-8773-43b5-9d82-d7629755c426")
                        });
                });

            modelBuilder.Entity("SDMS.Models.CurrentCourseStudent", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseTeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("CourseTeacherId");

                    b.HasIndex("StudentId");

                    b.ToTable("CurrentCourseStudents");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("28729ea4-1932-45cd-aa3b-cc0ae3a5dc19"),
                            StudentId = new Guid("22b7e4a5-91cf-4b43-9d43-b986e6eceafc"),
                            CourseTeacherId = new Guid("ae585a08-dff3-4228-bc52-ebd1e57d452d")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Score", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScoreOver100")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Scores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("022740e6-7938-4555-804e-04c262cc9ae1"),
                            CourseId = new Guid("25e7075d-e83b-4b90-977d-93ead5e1d20b"),
                            Date = new DateTime(2020, 2, 2, 23, 5, 9, 156, DateTimeKind.Local).AddTicks(4421),
                            ScoreOver100 = 93,
                            StudentId = new Guid("22b7e4a5-91cf-4b43-9d43-b986e6eceafc")
                        },
                        new
                        {
                            Id = new Guid("530af600-1fc1-4ab0-abe2-a3f3b1c7d225"),
                            CourseId = new Guid("25e7075d-e83b-4b90-977d-93ead5e1d20b"),
                            Date = new DateTime(2020, 3, 2, 23, 5, 9, 156, DateTimeKind.Local).AddTicks(5613),
                            ScoreOver100 = 85,
                            StudentId = new Guid("fea749dd-5009-4676-8759-90949a81badc")
                        },
                        new
                        {
                            Id = new Guid("8eac3e33-f2ca-4aeb-9758-7635a4a7667a"),
                            CourseId = new Guid("28729ea4-1932-45cd-aa3b-cc0ae3a5dc19"),
                            Date = new DateTime(2020, 2, 14, 23, 5, 9, 156, DateTimeKind.Local).AddTicks(5676),
                            ScoreOver100 = 100,
                            StudentId = new Guid("fea749dd-5009-4676-8759-90949a81badc")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Specialities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c09f481-83b1-4c48-b6f8-08fb248e3ef8"),
                            Name = "System Engineering",
                            StartDate = new DateTime(2020, 5, 2, 23, 5, 9, 136, DateTimeKind.Local).AddTicks(2730)
                        },
                        new
                        {
                            Id = new Guid("aaab1fb6-a7b0-403f-af6b-67bdd95c4e4f"),
                            Name = "Information Technologies",
                            StartDate = new DateTime(2020, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SDMS.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("RegisterStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22b7e4a5-91cf-4b43-9d43-b986e6eceafc"),
                            CardNumber = "ALVA001",
                            Details = "BA Programs",
                            Email = "alvan@sdms.az",
                            Gender = 0,
                            Name = "Alvan Rahimli",
                            Password = new byte[] { 220, 121, 31, 195, 66, 161, 196, 242, 197, 217, 20, 142, 19, 132, 185, 44, 89, 244, 177, 222, 235, 28, 62, 173, 121, 184, 91, 151, 77, 250, 162, 156 },
                            RegisterStatus = 1,
                            Role = "student",
                            SpecialityId = new Guid("2c09f481-83b1-4c48-b6f8-08fb248e3ef8")
                        },
                        new
                        {
                            Id = new Guid("fea749dd-5009-4676-8759-90949a81badc"),
                            CardNumber = "SAMI001",
                            Details = "BA Programs",
                            Email = "samir@sdms.az",
                            Gender = 0,
                            Name = "Samir Hasanov",
                            Password = new byte[] { 26, 138, 154, 79, 225, 90, 179, 124, 122, 92, 74, 150, 215, 163, 128, 13, 221, 243, 126, 213, 98, 60, 251, 224, 44, 198, 158, 237, 77, 194, 220, 152 },
                            RegisterStatus = 1,
                            Role = "student",
                            SpecialityId = new Guid("2c09f481-83b1-4c48-b6f8-08fb248e3ef8")
                        });
                });

            modelBuilder.Entity("SDMS.Models.TakenCourseStudent", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseTeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("CourseTeacherId");

                    b.HasIndex("StudentId");

                    b.ToTable("TakenCourseStudents");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("25e7075d-e83b-4b90-977d-93ead5e1d20b"),
                            StudentId = new Guid("22b7e4a5-91cf-4b43-9d43-b986e6eceafc"),
                            CourseTeacherId = new Guid("ae585a08-dff3-4228-bc52-ebd1e57d452d")
                        },
                        new
                        {
                            CourseId = new Guid("b860427d-493e-4472-ac3e-9abf9fab9e15"),
                            StudentId = new Guid("22b7e4a5-91cf-4b43-9d43-b986e6eceafc"),
                            CourseTeacherId = new Guid("6b0df89e-6a17-42b0-8979-4e0918acf421")
                        },
                        new
                        {
                            CourseId = new Guid("25e7075d-e83b-4b90-977d-93ead5e1d20b"),
                            StudentId = new Guid("fea749dd-5009-4676-8759-90949a81badc"),
                            CourseTeacherId = new Guid("ae585a08-dff3-4228-bc52-ebd1e57d452d")
                        },
                        new
                        {
                            CourseId = new Guid("28729ea4-1932-45cd-aa3b-cc0ae3a5dc19"),
                            StudentId = new Guid("fea749dd-5009-4676-8759-90949a81badc"),
                            CourseTeacherId = new Guid("ae585a08-dff3-4228-bc52-ebd1e57d452d")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CVPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("RegisterStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae585a08-dff3-4228-bc52-ebd1e57d452d"),
                            CVPath = "N/A",
                            CardNumber = "ANAR001",
                            Details = "since 2017 teaching here. Test data LOL",
                            Email = "anar@sdms.az",
                            Gender = 0,
                            Name = "Anar Kazimov",
                            Password = new byte[] { 13, 163, 157, 63, 215, 56, 253, 36, 173, 144, 123, 128, 215, 160, 65, 146, 66, 160, 85, 207, 141, 30, 123, 20, 133, 166, 142, 100, 95, 123, 123, 212 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        },
                        new
                        {
                            Id = new Guid("6b0df89e-6a17-42b0-8979-4e0918acf421"),
                            CVPath = "N/A",
                            CardNumber = "KONU001",
                            Details = "Cuuute teacher. doesn't know eng.",
                            Email = "konul@sdms.az",
                            Gender = 1,
                            Name = "Konul Jabbarova",
                            Password = new byte[] { 225, 95, 75, 32, 223, 30, 43, 41, 130, 26, 86, 69, 237, 49, 122, 22, 200, 149, 87, 68, 150, 95, 141, 191, 60, 121, 48, 214, 99, 239, 101, 71 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        },
                        new
                        {
                            Id = new Guid("b38c9773-30b7-4a23-81a6-1de2b83dab1d"),
                            CVPath = "N/A",
                            CardNumber = "ULVI001",
                            Details = "Meeh, not bad",
                            Email = "ulviyye@sdms.az",
                            Gender = 1,
                            Name = "Ulviyye Memmedova",
                            Password = new byte[] { 168, 14, 103, 199, 215, 42, 209, 248, 3, 160, 5, 252, 245, 60, 173, 182, 25, 218, 195, 84, 47, 209, 215, 43, 123, 101, 136, 37, 83, 85, 162, 6 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        },
                        new
                        {
                            Id = new Guid("0000d8e1-f639-4885-b787-d0f87e5ba7fa"),
                            CVPath = "N/A",
                            CardNumber = "CEYH001",
                            Details = "Veery Cuuute teacher. doesn't know eng.",
                            Email = "ceyhun@sdms.az",
                            Gender = 0,
                            Name = "Ceyhun Naziyev",
                            Password = new byte[] { 195, 139, 238, 24, 37, 33, 11, 141, 87, 96, 116, 187, 225, 223, 196, 114, 171, 140, 193, 4, 160, 103, 124, 221, 126, 213, 181, 35, 99, 184, 54, 125 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        },
                        new
                        {
                            Id = new Guid("675bacbf-5071-4751-8bf1-908bb8cae04e"),
                            CVPath = "N/A",
                            CardNumber = "ELED001",
                            Details = "Reis.",
                            Email = "eleddin@sdms.az",
                            Gender = 0,
                            Name = "Eleddin Memmedli",
                            Password = new byte[] { 47, 241, 100, 169, 13, 197, 122, 59, 242, 8, 3, 103, 181, 141, 173, 216, 176, 2, 209, 17, 102, 231, 236, 184, 248, 180, 21, 168, 107, 69, 177, 248 },
                            RegisterStatus = 1,
                            Role = "teacher"
                        });
                });

            modelBuilder.Entity("SDMS.Models.TeacherCourse", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherCourses");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("25e7075d-e83b-4b90-977d-93ead5e1d20b"),
                            TeacherId = new Guid("ae585a08-dff3-4228-bc52-ebd1e57d452d")
                        },
                        new
                        {
                            CourseId = new Guid("28729ea4-1932-45cd-aa3b-cc0ae3a5dc19"),
                            TeacherId = new Guid("ae585a08-dff3-4228-bc52-ebd1e57d452d")
                        },
                        new
                        {
                            CourseId = new Guid("b860427d-493e-4472-ac3e-9abf9fab9e15"),
                            TeacherId = new Guid("6b0df89e-6a17-42b0-8979-4e0918acf421")
                        },
                        new
                        {
                            CourseId = new Guid("b30764dd-6ea0-4997-9d7f-4baeb8d03040"),
                            TeacherId = new Guid("b38c9773-30b7-4a23-81a6-1de2b83dab1d")
                        },
                        new
                        {
                            CourseId = new Guid("52d3f9cf-2b66-415b-a4a6-cf6a676d1d47"),
                            TeacherId = new Guid("0000d8e1-f639-4885-b787-d0f87e5ba7fa")
                        },
                        new
                        {
                            CourseId = new Guid("e3d25582-8773-43b5-9d82-d7629755c426"),
                            TeacherId = new Guid("0000d8e1-f639-4885-b787-d0f87e5ba7fa")
                        },
                        new
                        {
                            CourseId = new Guid("25e7075d-e83b-4b90-977d-93ead5e1d20b"),
                            TeacherId = new Guid("675bacbf-5071-4751-8bf1-908bb8cae04e")
                        },
                        new
                        {
                            CourseId = new Guid("28729ea4-1932-45cd-aa3b-cc0ae3a5dc19"),
                            TeacherId = new Guid("675bacbf-5071-4751-8bf1-908bb8cae04e")
                        });
                });

            modelBuilder.Entity("SDMS.Models.Absence", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SDMS.Models.Course", b =>
                {
                    b.HasOne("SDMS.Models.Course", "RequiredBy")
                        .WithMany("Prerequisites")
                        .HasForeignKey("RequiredById");

                    b.HasOne("SDMS.Models.Teacher", null)
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("SDMS.Models.CourseSpeciality", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany("CourseSpecialities")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Speciality", "Speciality")
                        .WithMany("CourseSpecialities")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SDMS.Models.CurrentCourseStudent", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany("CurrentCourseStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SDMS.Models.Teacher", "CourseTeacher")
                        .WithMany()
                        .HasForeignKey("CourseTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Student", "Student")
                        .WithMany("CurrentCourseStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SDMS.Models.Score", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Student", "Student")
                        .WithMany("Marks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SDMS.Models.Student", b =>
                {
                    b.HasOne("SDMS.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SDMS.Models.TakenCourseStudent", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany("TakenCourseStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SDMS.Models.Teacher", "CourseTeacher")
                        .WithMany()
                        .HasForeignKey("CourseTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Student", "Student")
                        .WithMany("TakenCourseStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SDMS.Models.TeacherCourse", b =>
                {
                    b.HasOne("SDMS.Models.Course", "Course")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SDMS.Models.Teacher", "Teacher")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
